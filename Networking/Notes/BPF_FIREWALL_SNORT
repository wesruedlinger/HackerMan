<---------Berkeley Packet Filters (BPF)--------->
---tcpdump {A} [B:C] {D} {E} {F} {G}---
  A = Protocol (ether | arp | ip | ip6 | icmp | tcp | udp)
  B = Header Byte offset
  C = optional: Byte Length. Can be 1, 2 or 4 (default 1)
  D = optional: Bitwise mask (&)
  E = Operator (= | == | > | < | <= | >= | != | () | << | >>)
  F = Result of Expresion
  G = optional: Logical Operator (&& ||) to bridge expressions
#Example:
tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 && tcp[2:2] != 23)'

-----------------------------------------------------------------
<------Primitive Filtering shortcut w/ tcpdump------>
Sudo tcpdump -r ssh.pcap -w ntp.pcap “udp port 123”

#tcpdump switches
-XX
-n
-r	#read
-w	#write

=============================================================
<----------IPTABLES--------->
#Syntax
iptables -t [table] -A [chain] [rules] -j [action]

Tables:
filter(Default), NAT, mangle

Chains:
filter= INPUT, FORWARD, OUTPUT
nat= PREROUTING, POSTROUTING, and OUTPUT
mangle= PREROUTING, POSTROUTING, INPUT, FORWARD and OUTPUT

Rules:
-i or -o [iface]	# inbound or outbound
-s or -d [ip.add | network/mask]	# source or destination
-p [protocol(in ipv4 header)]
-m is used with:	#match
  state --state [state]
  mac [--mac-source | --mac-destination] [mac]
  tcp | udp [--dport | --sport] [port | port1:port2]
  multiport [--sports | --dports | --ports]
                [port1,[port2,[port3:port15]]]
  bpf --bytecode [ 'bytecode' ]

Actions:
ACCEPT (default), REJECT, DROP

--------------------------------------------------------------
<-----MODIFY IPTABLES----->
#Flush table
iptables -t [table] -F

#Change default policy
iptables -t [table] -P [chain] [action]

#Lists rules with rule numbers
iptables -t [table] -L --line-numbers

#Lists rules as commands interpreted by the system
iptables -t [table] -S

#Inserts rule before Rule number
iptables -t [table] -I [chain] [rule num] [rules] -j [action]

#Deletes rule at number
iptables -t [table] -D [chain] [rule num]

--------------------------------------------------------------
<-----IPTABLES DEMO------>
#view filter table defaults
sudo iptables -L

#view mangle table defaults
sudo iptables -t mangle -L

#view nat table defaults
sudo iptables -t nat -L

#Show current policies
sudo iptables -S

#Change policy
sudo iptables -P FORWARD ACCEPT

#Set rule stoping internet-host from coming to blue-host-1 port 80
sudo iptables -A INPUT -s 10.10.0.40 -p tcp --dport 80 -j DROP

#Show line numbers
sudo iptables -nL --line-numbers

#Del a line
sudo iptables -D INPUT 1

#Create a rule using match that filters NEW connections
sudo iptables -A INPUT -s 10.10.0.40 -p tcp --dport 80 -j DROP -m state --state NEW

#filter multiple ports
sudo iptables -A INPUT -s 10.10.0.40 -p tcp -m multiport--dports 80 -j DROP

===============================================================
<-----NFTABLES------>
Chains:
filter - to filter packets - can be used with arp, bridge, ip, ip6, and inet families
route - to reroute packets - can be used with ip and ipv6 families only
nat - used for Network Address Translation - used with ip and ip6 table families only

#Step 1: Create a table 
nft add table [family] [table]

[family] = ip, ip6, inet, arp, bridge and netdev.
[table] = user provided name for the table.

#Step 2: Create the Base Chain
nft add chain [family] [table] [chain] { type [type] hook [hook]
    priority [priority] \; policy [policy] \;}

[chain] = User defined name for the chain.

[type] =  can be filter, route or nat.

[hook] = prerouting, ingress, input, forward, output or
         postrouting.

[priority] = user provided integer. Lower number = higher
             priority. default = 0. Use "--" before
             negative numbers.

; [policy] ; = set policy for the chain. Can be
              accept (default) or drop.

 Use "\" to escape the ";" in bash

#Step 3: Create a rule in the Chain
nft add rule [family] [table] [chain] [matches (matches)] [statement]

[matches] = typically protocol headers(i.e. ip, ip6, tcp,
            udp, icmp, ether, etc)

(matches) = these are specific to the [matches] field.

[statement] = action performed when packet is matched. Some
              examples are: log, accept, drop, reject,
              counter, nat (dnat, snat, masquerade)
              
------------------------------------------------------------------
<----------MODIFY NFTABLES------>
nft {list | flush} ruleset
nft {delete | list | flush } table [family] [table]
nft {delete | list | flush } chain [family] [table] [chain]

nft list table [family] [table] [-a]
#Adds after position
nft add rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]

#Inserts before position
nft insert rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]

#Replaces rule at handle
nft replace rule [family] [table] [chain] [handle <handle>] [matches (matches)] [statement]

#Deletes rule at handle
nft delete rule [family] [table] [chain] [handle <handle>]

--------------------------------------------------------------
<-----NFTABLES DEMO------>
#View rules
sudo nft list rulset
-n	no name resolution
-nn	no port resolution
-ann	handle number

#create a table 
sudo nft add table ip box

#create base chain
sudo nft add chain ip box shoe { type filter hook input priority 0 \; policy accept \;}

#create a rule in the Chain
sudo nft add rule ip box shoe tcp dport 80 drop

#delete a rule
sudo nft delete rule ip box shoe handle <#>

#Insert a new rule into a specific position
sudo nft insert rule ip box shoe postion 2 tcp dport 80 drop

#drop icmp request rule
sudo nft insert rule ip box flipflop icmp type echo-request drop

===============================================================
<-----NAT w/ IPTABLES------>
#changing the source IP address
iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to 1.1.1.1

#changing the destination IP address
iptables -t nat -A PREROUTING -i eth0 -j DNAT --to 10.0.0.1

#changing source IP and Port
iptables -t nat -A POSTROUTING -p tcp -o eth0 -j SNAT --to 1.1.1.1:9001

===============================================================
<-----NAT w/ NFTABLES------>
##Create the NAT table
nft add table ip NAT

##Create the NAT chains
nft add chain ip NAT PREROUTING {type nat hook prerouting priority 0 \; }
nft add chain ip NAT POSTROUTING {type nat hook postrouting priority 100 \; }

##Create the NAT rules
#Source NAT
nft add rule ip NAT POSTROUTING ip saddr 10.1.0.2 oif eth0 snat 144.15.60.11

#Destination NAT
nft add rule ip NAT PREROUTING iif eth0 tcp dport { 80, 443 } dnat 10.1.0.3

#Source NAT w/ masquesrade
nft add rule ip NAT POSTROUTING ip saddr 10.1.0.0/24 oif eth0 masquerade

#Destination NAT (port forwarding) with redirect
nft add rule ip NAT PREROUTING tcp dport 80 redirect to 8080

===============================================================
<-----NETWORK BASED FILTERING (VYOS/CISCO)------>
##VYOS
{configure} - Navigate to configuration mode
{show configuration } - to view the current router configuration
{show ?} - will show a list of available commands
{tab} - to complete a command
{?} - indentifes the next set of arguments you can use for the current command syntax
{set} to add statement and {delete} to remove statement
{commit} - save the configurations to the running configuration
{save} - save configuration to the startup configuration

#Configure an interface
set interfaces ethernet eth1 address '192.168.0.1/24'
set interfaces ethernet eth1 description 'INSIDE'

#Configure a static route
set protocols static route 0.0.0.0/0 next-hop 172.16.0.254 distance '1'

#Configure RIP
set interfaces loopback address 1.1.1.1/32
set protocols rip network 10.1.0.0/24
set protocols rip redistribute connected

#Configure Firewall
set firewall name INSIDE-OUT default-action drop
set firewall name INSIDE-OUT rule 1010 action accept
set firewall name INSIDE-OUT rule 1010 state established enable
set firewall name INSIDE-OUT rule 1020 action drop
set firewall name INSIDE-OUT rule 1020 state invalid enable

#Apply Firewall
set interfaces ethernet eth1 firewall in name INSIDE-OUT

------------------------------------------------------------------
<---IDS/IPS (SNORT)--->
[action] [protocol] [s.ip] [s.port] [direction] [d.ip] [d.port] ( match conditions ;)
    [Action] - such as alert, log, pass, drop, reject
    [Protocol] - includes TCP, UDP, ICMP and others
    [Source IP] address - single address, CIDR notation, range, or any
    [Source Port] - one, multiple, any, or range of ports
    [Direction] - either inbound or in and outbound
    [Destination IP] address - options mirror Source IP
    [Destination port] - options mirror Source port
#Snort IDS/IPS General rule options:
    ***msg - specifies the human-readable alert message
    reference - links to external source of the rule
    ***sid - used to uniquely identify Snort rules
#Snort IDS/IPS Payload detection options:
    ***content - looks for a string of text.
    
----------------------------------------------------------------
<---SNORT Examples--->
#ICMP ping sweep
alert icmp any any -> 10.1.0.2 any (msg: "NMAP ping sweep Scan"; dsize:0; sid:10000004; rev: 1; )

#Look for a specific set of Hex bits (NoOP sled)
alert tcp any any -> any any (msg:"NoOp sled"; content: "|9090 9090 9090|"; sid:9090; rev: 1; )

#Incorrect telnet login attempt
alert tcp any 23 -> any any (msg:"TELNET login incorrect"; content:"Login incorrect";
flow:established,from_server; classtype:bad-unknown; sid:2323; rev:6; )

-----------------------------------------------------------------
<---RUNNING SNORT--->
#run snort
sudo snort -D -c /etc/snort/snort.conf

#where snort lives
/etc/snort

#where snort log files live
/var/log/snort

#read snort log file (need to be in or specify /var/log/snort)
sudo tcpdump -r snort.log.1588345291

=====================================================================================
=====================================================================================
<------BPF FLAGS------>
#What is the Berkeley Packet Filter, using tcpdump, to capture all packets with a ttl of 64 and less, utilizing the IP or IPv6 Headers?
sudo tcpdump -r BPFCheck.pcap 'ip[8] <= 0x40 || ip6[7] <= 0x40'

#What is the Berkeley Packet Filter, using tcpdump, to capture all IPv4 packets with only a Dont Fragment bit set?
sudo tcpdump -r BPFCheck.pcap 'ip[6] & 0x40 =  0x40'

#What is the Berkeley Packet Filter, using tcpdump, to capture all packets with a Source Port higher than 1024, utilizing the correct Transport Layer Headers?
sudo tcpdump -r BPFCheck.pcap 'tcp[0:2] > 1024 || udp[0:2] > 1024'

#What is the Berkeley Packet Filter, using tcpdump, to capture all Packets with UDP protocol being set, utilizing the IP or IPv6 Headers?
sudo tcpdump -r BPFCheck.pcap 'ip[9] = 0x11 || ip6[6] = 0x11'


#What is the Berkeley Packet Filter, using tcpdump, to capture only packets with the ACK/RST or ACK/FIN flag set, utilizing the correct Transport Layer Header?
sudo tcpdump -r BPFCheck.pcap 'tcp[13] = 0x14 || tcp[13] = 0x11'

#What is the Berkeley Packet Filter, using tcpdump, to capture all packets with an IP ID field of 213?
sudo tcpdump -r BPFCheck.pcap 'ip[4:2] = 213'

#What is the Berkeley Packet Filter, using tcpdump, to capture all packets that contain a VLAN tag?
sudo tcpdump -r BPFCheck.pcap 'ether[12:2] = 0x8100'

#What is the Berkeley Packet Filter, using tcpdump, to capture all packets relating to DNS?
sudo tcpdump -r BPFCheck.pcap ‘tcp[0:2] = 0x0035 || tcp[2:2] = 0x0035 || udp[0:2] = 0x0035 || udp[2:2] = 0x0035‘

#What is the Berkeley Packet Filter, using tcpdump, to capture all ipv4 packets with a DSCP field of 24?
sudo tcpdump -r BPFCheck.pcap ‘ip[1] & 0xFC = 96’

#What is the Berkeley Packet Filter, using tcpdump, to capture all ipv4 packets targeting just the beginning of traceroute being run on your local machine?
sudo tcpdump -r BPFCheck.pcap ‘ip[8] = 1’

=====================================================================================
<---------BPF Extra Practice-------->
1) Capture any ipv4 packet with the version of 4, whether or not there are IP options. (There should be 93 matches)
sudo tcpdump -r practice.pcap 'ip[0] & 0xF0 = 0x40' | wc -l

2) Capture any ipv4 packet with a DSCP of 28. (There should be 4 matches)
sudo tcpdump -r practice.pcap 'ip[1] & 0xFC = 0x70' | wc -l

3) Capture any ipv4 packet with both the IP ID of 12345 and anytime the MF flag set regardless of what other flags may be on. (There should be 8 matches)
sudo tcpdump -r practice.pcap 'ip[4:2] = 12345 && ip[6] & 0x20 = 0x20' | wc -l

4) Capture all ARP frames. (There should be 10 matches)


5) Capture all IPv4 or IPv6 Packets. (There should be 104 matches)


6) Capture all ipv4 packets with a Source Port of HTTPS and only the SYN/ACK flags set. (There should be 3 matches)


7) Capture all ipv4 packets that includes any time DHCP is used. (There are 2 ports, capture all sides of each conversation) && (There should be 16 matches)


8) Capture all ipv4 packets that include the ICMP time exceeded messages. (There should be 5 matches)

=====================================================================================
=====================================================================================
<-------SNORT RULES FLAGS-------->
Pivot
Hostname: INTERNET_HOST
IP: 10.10.0.40 (Use the provided floating IP only for login from outside of the network

T1
Hostname: BLUE_Host-1
IP: 172.16.82.106

T2
Hostname: BLUE_Host-3
IP: 172.16.82.112

T3
Hostname: BLUE_INT_DMZ_HOST-1
IP: 172.16.40.10

T4
Hostname: (Will be provided by Mission Command)
IP: 10.50.20.129 (Will be Provided by Mission Command)
creds: student15:password15 (X = Student Number)
Known Ports: 443, 80, 25(alt ssh), 22, 21
Action: Interrogate Target and validate Signatures

T5
Hostname: BLUE_PRIV_HOST-1
IP: 192.168.1.10
creds: student : password
Action: Allow traffic through NAT Capabilities

T6
Hostname: BLUE_PRIV_HOST-3
IP: 192.168.3.30
creds: student : password
Action: Allow traffic through NAT Capabilities

---------------------------------------------------------------------------
#From T1--Blue_Host1--172.16.82.106
Objective 1: Allow New and Established traffic to/from via SSH, TELNET, and RDP
sudo iptables -A INPUT -m state --state NEW -p tcp -m multiport --ports 22,23,3389 -j ACCEPT
sudo iptables -A INPUT -m state --state ESTABLISHED -p tcp -m multiport --ports 22,23,3389 -j ACCEPT
sudo iptables -A OUTPUT -m state --state NEW -p tcp -m multiport --ports 22,23,3389 -j ACCEPT
sudo iptables -A OUTPUT -m state --state ESTABLISHED -p tcp -m multiport --ports 22,23,3389 -j ACCEPT

#From T1--Blue_Host1--172.16.82.106
Objective 2: Change the Default Policy in the Filter Table for the INPUT, OUTPUT, and FORWARD chains to DROP
sudo iptables -t filter -P INPUT DROP
sudo iptables -t filter -P OUTPUT DROP
sudo iptables -t filter -P FORWARD DROP

#From T1--Blue_Host1--172.16.82.106
Objective 3: Only allow Pivot to perform ping (ICMP) operations to/from
sudo iptables -A OUTPUT -p icmp -d 10.10.0.40 -j ACCEPT
sudo iptables -A INPUT -p icmp -s 10.10.0.40 -j ACCEPT

#From T1--Blue_Host1--172.16.82.106
Objective 4: Allow ports 6579 and 4444 for both udp and tcp traffic
sudo iptables -A INPUT -p tcp -m multiport --ports 6579,4444 -j ACCEPT
sudo iptables -A OUTPUT -p tcp -m multiport --ports 6579,4444 -j ACCEPT
sudo iptables -A INPUT -p udp -m multiport --ports 6579,4444 -j ACCEPT
sudo iptables -A OUTPUT -p udp -m multiport --ports 6579,4444 -j ACCEPT

#From T1--Blue_Host1--172.16.82.106
Objective 5: Allow New and Established traffic to/from via HTTP
sudo iptables -A INPUT -m state --state NEW,ESTABLISHED -p tcp --sport 80 -j ACCEPT
sudo iptables -A INPUT -m state --state NEW,ESTABLISHED -p tcp --dport 80 -j ACCEPT
sudo iptables -A OUTPUT -m state --state NEW,ESTABLISHED -p tcp --sport 80 -j ACCEPT
sudo iptables -A OUTPUT -m state --state NEW,ESTABLISHED -p tcp --dport 80 -j ACCEPT

-----------------------------------------------------------------------------------
#From T3---BLUE_INT_DMZ_HOST-1---172.16.40.10
Objective 1: Allow New and Established traffic to/from via SSH, TELNET, and RDP
sudo iptables -A INPUT -m state --state NEW -p tcp -m multiport --ports 22,23,3389 -j ACCEPT
sudo iptables -A INPUT -m state --state ESTABLISHED -p tcp -m multiport --ports 22,23,3389 -j ACCEPT
sudo iptables -A OUTPUT -m state --state NEW -p tcp -m multiport --ports 22,23,3389 -j ACCEPT
sudo iptables -A OUTPUT -m state --state ESTABLISHED -p tcp -m multiport --ports 22,23,3389 -j ACCEPT

#From T3---BLUE_INT_DMZ_HOST-1---172.16.40.10
Objective 2: Change the Default Policy in the Filter Table for the INPUT, OUTPUT, and FORWARD chains to DROP
sudo iptables -t filter -P INPUT DROP
sudo iptables -t filter -P OUTPUT DROP
sudo iptables -t filter -P FORWARD DROP

#From T3---BLUE_INT_DMZ_HOST-1---172.16.40.10
Objective 3: Allow New and Established traffic to/from via HTTP
sudo iptables -A INPUT -m state --state NEW,ESTABLISHED -p tcp --sport 80 -j ACCEPT
sudo iptables -A INPUT -m state --state NEW,ESTABLISHED -p tcp --dport 80 -j ACCEPT
sudo iptables -A OUTPUT -m state --state NEW,ESTABLISHED -p tcp --sport 80 -j ACCEPT
sudo iptables -A OUTPUT -m state --state NEW,ESTABLISHED -p tcp --dport 80 -j ACCEPT

-----------------------------------------------------------------------------------
#From T2---BLUE_Host-3---172.16.82.112
NFTable: CCTC	 Family: ip
Objectives:

Step 1: Create a table
sudo nft add table ip CCTC

Step 2: Create a chains
sudo nft add chain ip CCTC input { type filter hook input priority 0 \; policy accept \;}
sudo nft add chain ip CCTC output { type filter hook output priority 0 \; policy accept \;}

Step 3: Create rules allowing New and Established traffic to/from via SSH, TELNET, and RDP
sudo nft add rule ip CCTC input tcp dport { 22, 23, 3389 } ct state { new, established } accept
sudo nft add rule ip CCTC input tcp sport { 22, 23, 3389 } ct state { new, established } accept
sudo nft add rule ip CCTC output tcp dport { 22, 23, 3389 } ct state { new, established } accept
sudo nft add rule ip CCTC output tcp sport { 22, 23, 3389 } ct state { new, established } accept

Step 4: Change your chains to now have a policy of Drop
sudo nft add chain ip CCTC input { type filter hook input priority 0 \; policy drop \;}
sudo nft add chain ip CCTC output { type filter hook output priority 0 \; policy drop \;}

Step 5: Only allow Pivot to perform ping (ICMP) operations to/from
sudo nft add rule ip CCTC input ip protocol icmp ip saddr 10.10.0.40 accept
sudo nft add rule ip CCTC input ip protocol icmp ip daddr 10.10.0.40 accept
sudo nft add rule ip CCTC output ip protocol icmp ip saddr 10.10.0.40 accept
sudo nft add rule ip CCTC output ip protocol icmp ip daddr 10.10.0.40 accept

Step 6: Allow ports 5050 and 5150 for both udp and tcp traffic
sudo nft add rule ip CCTC input tcp sport { 5050, 5150 } accept
sudo nft add rule ip CCTC input tcp dport { 5050, 5150 } accept
sudo nft add rule ip CCTC input udp sport { 5050, 5150 } accept
sudo nft add rule ip CCTC input udp dport { 5050, 5150 } accept
sudo nft add rule ip CCTC output tcp sport { 5050, 5150 } accept
sudo nft add rule ip CCTC output tcp dport { 5050, 5150 } accept
sudo nft add rule ip CCTC output udp sport { 5050, 5150 } accept
sudo nft add rule ip CCTC output udp dport { 5050, 5150 } accept

Step 7: Allow New and Established traffic to/from via HTTP
sudo nft add rule ip CCTC input tcp dport 80 ct state { new, established } accept
sudo nft add rule ip CCTC input tcp sport 80 ct state { new, established } accept
sudo nft add rule ip CCTC output tcp dport 80 ct state { new, established } accept
sudo nft add rule ip CCTC output tcp sport 80 ct state { new, established } accept

-----------------------------------------------------------------------------------
#From T5---Blue_Priv_Host-1---192.168.1.10
Objectives:
Step 1: Prepare T1 for NAT Configurations
    #Change the Default Policy in the Filter Table for the INPUT, OUTPUT, and FORWARD chains to ACCEPT
sudo iptables -P INPUT ACCEPT
sudo iptables -P OUTPUT ACCEPT
sudo iptables -P FORWARD ACCEPT
    #Flush your current iptables rules.
sudo iptables -F
    #Temporarily enable IPv4 forwarding using the /proc/sys/net/ipv4/ip_forward file
sudo nano /proc/sys/net/ipv4/ip_forward

Step 2: Prepare T5 for NAT Configurations
    #Set default gateway for traffic from T5 to go to T1
ssh 192.168.1.10 (T5)
sudo route add default gw 192.168.1.1 eth0
ip route	#check that it took

Step 3: Configure POSTROUTING chain to translate T5 IP address to T1 (Create the rule by specifying the Layer 2 information first then Layer 3)
iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to 172.16.82.106

-----------------------------------------------------------------------------------
#T2--BLUE_Host-3--172.16.82.112
#T6--BLUE_PRIV_HOST-3--192.168.3.30

Step 1:	#Prepare T2 for NAT Configurations
    Change your chains to now have a policy of Accept
sudo nft add chain ip CCTC input { type filter hook input priority 0 \; policy accept \;}
sudo nft add chain ip CCTC output { type filter hook output priority 0 \; policy accept \;}
    Flush your current nftables rules.

    Temporarily enable IPv4 forwarding using the /proc/sys/net/ipv4/ip_forward file
sudo nano /proc/sys/net/ipv4/ip_forward

Step 2: #Prepare T6 for NAT Configurations
    Ensure there is a Default GW entry present for 192.168.3.1
ssh 192.168.3.30
sudo route add default gw 192.168.3.1 eth0
ip route	#check that it took

Step 3: NFTable Rule Definitions	#from T2
#Create the NAT table
sudo nft add table ip NAT

#Create the NAT chains
sudo nft add chain ip NAT PREROUTING {type nat hook prerouting priority 0 \; }
sudo nft add chain ip NAT POSTROUTING {type nat hook postrouting priority 0 \; }

##Create the NAT rules
#Source NAT
sudo nft add rule ip NAT POSTROUTING ip saddr 192.168.3.30 oif eth0 snat 172.16.82.112

=====================================================================================
=====================================================================================
<--------SIGNATURE FLAGS--------->
#Gorgan Cyber Forces have captured targeted traffic related to specific Indicators of Compromise (IOCs) relating to Donovian Actors. They have stored the Traffic Capture on the Pivot:
/home/activity_resources/pcaps/ids.pcap

#They have also provided the following syntax for utilizing Snort, their implemented IDS Signature solution:
sudo snort -D -i eth0 -l /var/log/snort/ -c /etc/snort/snort.conf

Step 1: #scan and enumerate host
nc -nzvw1 10.50.20.129 1-1024
ssh student15@10.50.20.129 -p 25	#ssh into host
ip addr					#from target (10.0.0.101/24)
ip route				#from target ()
find / -iname 'snort' 2>/dev/null

Step 2: #read pcap on linux_ops station and id how many alert were create
sudo snort -r /home/activity_resources/pcaps/ids.pcap

Step 3: #create a new rule alerting icmp with content of DEADBEEF
alert icmp any any -> any any (msg:"Cows";content:"|DEADBEEF|";sid:1000001;)

Step 4:	#test rule (add include and path to conf file)
sudo snort -c /etc/snort/snort.conf -r /home/activity_resources/pcaps/ids.pcap

Step 5: # create rule to alert ICMP Echo Requests Detects Type 8 / Code 0 To 10.3.0.0/24
alert icmp any any -> 10.3.0.0/24 any (msg:"DMZ Ping";itype:8 ;icode:0 ;sid:1000002;)

Step 6: # test rule (add include and path to conf file)
sudo snort -c /etc/snort/snort.conf -r /home/activity_resources/pcaps/ids.pcap

Step 7: #Track 3 ssh authentication attempts within 10 seconds coming from a Specific Source using both threshold.
alert tcp any any -> any 22 (msg:"SSH Brute"; threshold: type both, track by_src, count 3, seconds 10; sid:1000003;)

Step 8:	#Track IP Protocol and RDP traffic to and from 10.1.0.0/24 regardless of the traffic flow state.
alert ip any any <> 10.1.0.0/24 3389 (msg:"RDP you know me"; sid:1000004;)

Step 9: #Create rule that detects TCP Null scan to 10.3.0.0/24 regardless of the traffic flow state.
alert tcp any any -> 10.3.0.0/24 any (msg:"Null Scan"; flow: stateless; flags: 0; sid:1000005;)

Step 10: #Detect all traffic using tcp ports (445 139) and udp ports (137 138) regardless of the traffic flow state going to 10.0.0.0/8. 
alert tcp any any -> 10.0.0.0/8 [139,445] (msg:"WannaCry"; flow: stateless; sid:1000005;)
alert udp any any -> 10.0.0.0/8 [137,138] (msg:"WannaCry"; flow: stateless; sid:1000006;)




























